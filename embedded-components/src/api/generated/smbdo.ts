/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Embedded Finance Digital Onboarding API
 * Embedded Finance & Solutions APIs from J.P. Morgan.
 * OpenAPI spec version: 1.0.10
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { ebInstance } from '../axios-instance';
import type { BodyType, ErrorType } from '../axios-instance';
import type {
  ClientListResponse,
  ClientResponse,
  ClientUpdatedResponse,
  ClientVerificationRequest,
  CreateClientRequestSmbdo,
  CreatePartyRequest,
  DocumentRequestId,
  DocumentRequestListResponse,
  DocumentRequestResponse,
  DocumentResponse,
  DocumentUploadAccepted,
  GetAllPartiesParams,
  ListDocumentsResponse,
  ListPartyResponse,
  N202Response,
  N202VerificationsResponse,
  N400Response,
  N401Response,
  N403Response,
  N404Response,
  N422Response,
  N500Response,
  N503Response,
  PartyResponse,
  PostUploadDocument,
  QuestionListResponse,
  QuestionResponse,
  SmbdoDownloadDocument200Six,
  SmbdoGetAllDocumentDetailsParams,
  SmbdoListClientsParams,
  SmbdoListDocumentRequestsParams,
  SmbdoListQuestionsParams,
  UpdateClientRequestSmbdo,
  UpdatePartyRequest,
} from './smbdo.schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Returns a list of clients associated with your platform.
 * @summary List clients
 */
export const smbdoListClients = (
  params?: SmbdoListClientsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ClientListResponse>(
    { url: `/clients`, method: 'GET', params, signal },
    options
  );
};

export const getSmbdoListClientsQueryKey = (
  params?: SmbdoListClientsParams
) => {
  return [`/clients`, ...(params ? [params] : [])] as const;
};

export const getSmbdoListClientsQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoListClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoListClientsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoListClients>>
  > = ({ signal }) => smbdoListClients(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoListClients>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoListClientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoListClients>>
>;
export type SmbdoListClientsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useSmbdoListClients<
  TData = Awaited<ReturnType<typeof smbdoListClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | SmbdoListClientsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListClients>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoListClients>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoListClients<
  TData = Awaited<ReturnType<typeof smbdoListClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListClients>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoListClients>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoListClients<
  TData = Awaited<ReturnType<typeof smbdoListClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List clients
 */

export function useSmbdoListClients<
  TData = Awaited<ReturnType<typeof smbdoListClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListClients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSmbdoListClientsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a client.
 * @summary Create client
 */
export const smbdoPostClients = (
  createClientRequestSmbdo: BodyType<CreateClientRequestSmbdo>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<ClientUpdatedResponse>(
    {
      url: `/clients`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createClientRequestSmbdo,
    },
    options
  );
};

export const getSmbdoPostClientsMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostClients>>,
    TError,
    { data: BodyType<CreateClientRequestSmbdo> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoPostClients>>,
  TError,
  { data: BodyType<CreateClientRequestSmbdo> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoPostClients>>,
    { data: BodyType<CreateClientRequestSmbdo> }
  > = (props) => {
    const { data } = props ?? {};

    return smbdoPostClients(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoPostClientsMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoPostClients>>
>;
export type SmbdoPostClientsMutationBody = BodyType<CreateClientRequestSmbdo>;
export type SmbdoPostClientsMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create client
 */
export const useSmbdoPostClients = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostClients>>,
    TError,
    { data: BodyType<CreateClientRequestSmbdo> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoPostClients>>,
  TError,
  { data: BodyType<CreateClientRequestSmbdo> },
  TContext
> => {
  const mutationOptions = getSmbdoPostClientsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieve client details by its ID.
 * @summary Get client
 */
export const smbdoGetClient = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ClientResponse>(
    { url: `/clients/${id}`, method: 'GET', signal },
    options
  );
};

export const getSmbdoGetClientQueryKey = (id: string) => {
  return [`/clients/${id}`] as const;
};

export const getSmbdoGetClientQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetClient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof smbdoGetClient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSmbdoGetClientQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smbdoGetClient>>> = ({
    signal,
  }) => smbdoGetClient(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetClient>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetClientQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetClient>>
>;
export type SmbdoGetClientQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useSmbdoGetClient<
  TData = Awaited<ReturnType<typeof smbdoGetClient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof smbdoGetClient>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetClient>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetClient<
  TData = Awaited<ReturnType<typeof smbdoGetClient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof smbdoGetClient>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetClient>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetClient<
  TData = Awaited<ReturnType<typeof smbdoGetClient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof smbdoGetClient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get client
 */

export function useSmbdoGetClient<
  TData = Awaited<ReturnType<typeof smbdoGetClient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof smbdoGetClient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSmbdoGetClientQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a client.
 * @summary Update client
 */
export const smbdoUpdateClient = (
  id: string,
  updateClientRequestSmbdo: BodyType<UpdateClientRequestSmbdo>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<ClientUpdatedResponse>(
    {
      url: `/clients/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateClientRequestSmbdo,
    },
    options
  );
};

export const getSmbdoUpdateClientMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoUpdateClient>>,
    TError,
    { id: string; data: BodyType<UpdateClientRequestSmbdo> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoUpdateClient>>,
  TError,
  { id: string; data: BodyType<UpdateClientRequestSmbdo> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoUpdateClient>>,
    { id: string; data: BodyType<UpdateClientRequestSmbdo> }
  > = (props) => {
    const { id, data } = props ?? {};

    return smbdoUpdateClient(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoUpdateClientMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoUpdateClient>>
>;
export type SmbdoUpdateClientMutationBody = BodyType<UpdateClientRequestSmbdo>;
export type SmbdoUpdateClientMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update client
 */
export const useSmbdoUpdateClient = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoUpdateClient>>,
    TError,
    { id: string; data: BodyType<UpdateClientRequestSmbdo> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoUpdateClient>>,
  TError,
  { id: string; data: BodyType<UpdateClientRequestSmbdo> },
  TContext
> => {
  const mutationOptions = getSmbdoUpdateClientMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Performs client verifications
 * @summary Perform client verifications
 */
export const smbdoPostClientVerifications = (
  id: string,
  clientVerificationRequest: BodyType<ClientVerificationRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<N202VerificationsResponse>(
    {
      url: `/clients/${id}/verifications`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: clientVerificationRequest,
    },
    options
  );
};

export const getSmbdoPostClientVerificationsMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N422Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
    TError,
    { id: string; data: BodyType<ClientVerificationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
  TError,
  { id: string; data: BodyType<ClientVerificationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
    { id: string; data: BodyType<ClientVerificationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return smbdoPostClientVerifications(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoPostClientVerificationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoPostClientVerifications>>
>;
export type SmbdoPostClientVerificationsMutationBody =
  BodyType<ClientVerificationRequest>;
export type SmbdoPostClientVerificationsMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N422Response
  | N500Response
  | N503Response
>;

/**
 * @summary Perform client verifications
 */
export const useSmbdoPostClientVerifications = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N422Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
    TError,
    { id: string; data: BodyType<ClientVerificationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoPostClientVerifications>>,
  TError,
  { id: string; data: BodyType<ClientVerificationRequest> },
  TContext
> => {
  const mutationOptions =
    getSmbdoPostClientVerificationsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists customer due diligence questions.

 * @summary List questions
 */
export const smbdoListQuestions = (
  params?: SmbdoListQuestionsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<QuestionListResponse>(
    { url: `/questions`, method: 'GET', params, signal },
    options
  );
};

export const getSmbdoListQuestionsQueryKey = (
  params?: SmbdoListQuestionsParams
) => {
  return [`/questions`, ...(params ? [params] : [])] as const;
};

export const getSmbdoListQuestionsQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoListQuestions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListQuestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListQuestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoListQuestionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoListQuestions>>
  > = ({ signal }) => smbdoListQuestions(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoListQuestions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoListQuestionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoListQuestions>>
>;
export type SmbdoListQuestionsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useSmbdoListQuestions<
  TData = Awaited<ReturnType<typeof smbdoListQuestions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | SmbdoListQuestionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListQuestions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoListQuestions>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoListQuestions<
  TData = Awaited<ReturnType<typeof smbdoListQuestions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListQuestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListQuestions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoListQuestions>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoListQuestions<
  TData = Awaited<ReturnType<typeof smbdoListQuestions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListQuestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListQuestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List questions
 */

export function useSmbdoListQuestions<
  TData = Awaited<ReturnType<typeof smbdoListQuestions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListQuestionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListQuestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSmbdoListQuestionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a customer due diligence question.

 * @summary Get question
 */
export const smbdoGetQuestion = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<QuestionResponse>(
    { url: `/questions/${id}`, method: 'GET', signal },
    options
  );
};

export const getSmbdoGetQuestionQueryKey = (id: string) => {
  return [`/questions/${id}`] as const;
};

export const getSmbdoGetQuestionQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetQuestion>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetQuestion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSmbdoGetQuestionQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoGetQuestion>>
  > = ({ signal }) => smbdoGetQuestion(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetQuestion>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetQuestionQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetQuestion>>
>;
export type SmbdoGetQuestionQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useSmbdoGetQuestion<
  TData = Awaited<ReturnType<typeof smbdoGetQuestion>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetQuestion>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetQuestion>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetQuestion<
  TData = Awaited<ReturnType<typeof smbdoGetQuestion>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetQuestion>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetQuestion>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetQuestion<
  TData = Awaited<ReturnType<typeof smbdoGetQuestion>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetQuestion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get question
 */

export function useSmbdoGetQuestion<
  TData = Awaited<ReturnType<typeof smbdoGetQuestion>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetQuestion>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSmbdoGetQuestionQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a list of document requests.

 * @summary List document requests
 */
export const smbdoListDocumentRequests = (
  params?: SmbdoListDocumentRequestsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<DocumentRequestListResponse>(
    { url: `/document-requests`, method: 'GET', params, signal },
    options
  );
};

export const getSmbdoListDocumentRequestsQueryKey = (
  params?: SmbdoListDocumentRequestsParams
) => {
  return [`/document-requests`, ...(params ? [params] : [])] as const;
};

export const getSmbdoListDocumentRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListDocumentRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoListDocumentRequestsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoListDocumentRequests>>
  > = ({ signal }) => smbdoListDocumentRequests(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoListDocumentRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoListDocumentRequests>>
>;
export type SmbdoListDocumentRequestsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useSmbdoListDocumentRequests<
  TData = Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | SmbdoListDocumentRequestsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoListDocumentRequests<
  TData = Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListDocumentRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoListDocumentRequests<
  TData = Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListDocumentRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List document requests
 */

export function useSmbdoListDocumentRequests<
  TData = Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoListDocumentRequestsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoListDocumentRequests>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSmbdoListDocumentRequestsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns details for a document request using its unique identifier.
 * @summary Get document request
 */
export const smbdoGetDocumentRequest = (
  id: DocumentRequestId,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<DocumentRequestResponse>(
    { url: `/document-requests/${id}`, method: 'GET', signal },
    options
  );
};

export const getSmbdoGetDocumentRequestQueryKey = (id: DocumentRequestId) => {
  return [`/document-requests/${id}`] as const;
};

export const getSmbdoGetDocumentRequestQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: DocumentRequestId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoGetDocumentRequestQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoGetDocumentRequest>>
  > = ({ signal }) => smbdoGetDocumentRequest(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetDocumentRequestQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetDocumentRequest>>
>;
export type SmbdoGetDocumentRequestQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useSmbdoGetDocumentRequest<
  TData = Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: DocumentRequestId,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetDocumentRequest<
  TData = Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: DocumentRequestId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetDocumentRequest<
  TData = Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: DocumentRequestId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get document request
 */

export function useSmbdoGetDocumentRequest<
  TData = Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: DocumentRequestId,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentRequest>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSmbdoGetDocumentRequestQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Submit a document request after documents that fulfill the request have been submitted.
 * @summary Submit a document request
 */
export const smbdoSubmitDocumentRequest = (
  id: DocumentRequestId,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<N202Response>(
    { url: `/document-requests/${id}/submit`, method: 'POST' },
    options
  );
};

export const getSmbdoSubmitDocumentRequestMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N422Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoSubmitDocumentRequest>>,
    TError,
    { id: DocumentRequestId },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoSubmitDocumentRequest>>,
  TError,
  { id: DocumentRequestId },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoSubmitDocumentRequest>>,
    { id: DocumentRequestId }
  > = (props) => {
    const { id } = props ?? {};

    return smbdoSubmitDocumentRequest(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoSubmitDocumentRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoSubmitDocumentRequest>>
>;

export type SmbdoSubmitDocumentRequestMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N422Response
  | N500Response
  | N503Response
>;

/**
 * @summary Submit a document request
 */
export const useSmbdoSubmitDocumentRequest = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N422Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoSubmitDocumentRequest>>,
    TError,
    { id: DocumentRequestId },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoSubmitDocumentRequest>>,
  TError,
  { id: DocumentRequestId },
  TContext
> => {
  const mutationOptions = getSmbdoSubmitDocumentRequestMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * This section allows the user to attach the binary file upload and meta-data associated with the document.

 * @summary Upload document
 */
export const smbdoUploadDocument = (
  postUploadDocument: BodyType<PostUploadDocument>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<DocumentUploadAccepted>(
    {
      url: `/documents`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postUploadDocument,
    },
    options
  );
};

export const getSmbdoUploadDocumentMutationOptions = <
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoUploadDocument>>,
    TError,
    { data: BodyType<PostUploadDocument> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof smbdoUploadDocument>>,
  TError,
  { data: BodyType<PostUploadDocument> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smbdoUploadDocument>>,
    { data: BodyType<PostUploadDocument> }
  > = (props) => {
    const { data } = props ?? {};

    return smbdoUploadDocument(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SmbdoUploadDocumentMutationResult = NonNullable<
  Awaited<ReturnType<typeof smbdoUploadDocument>>
>;
export type SmbdoUploadDocumentMutationBody = BodyType<PostUploadDocument>;
export type SmbdoUploadDocumentMutationError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

/**
 * @summary Upload document
 */
export const useSmbdoUploadDocument = <
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smbdoUploadDocument>>,
    TError,
    { data: BodyType<PostUploadDocument> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof smbdoUploadDocument>>,
  TError,
  { data: BodyType<PostUploadDocument> },
  TContext
> => {
  const mutationOptions = getSmbdoUploadDocumentMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves a list of document details.

 * @summary List document details
 */
export const smbdoGetAllDocumentDetails = (
  params?: SmbdoGetAllDocumentDetailsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListDocumentsResponse>(
    { url: `/documents`, method: 'GET', params, signal },
    options
  );
};

export const getSmbdoGetAllDocumentDetailsQueryKey = (
  params?: SmbdoGetAllDocumentDetailsParams
) => {
  return [`/documents`, ...(params ? [params] : [])] as const;
};

export const getSmbdoGetAllDocumentDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoGetAllDocumentDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoGetAllDocumentDetailsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>
  > = ({ signal }) =>
    smbdoGetAllDocumentDetails(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetAllDocumentDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>
>;
export type SmbdoGetAllDocumentDetailsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useSmbdoGetAllDocumentDetails<
  TData = Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | SmbdoGetAllDocumentDetailsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetAllDocumentDetails<
  TData = Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoGetAllDocumentDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetAllDocumentDetails<
  TData = Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoGetAllDocumentDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List document details
 */

export function useSmbdoGetAllDocumentDetails<
  TData = Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: SmbdoGetAllDocumentDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetAllDocumentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSmbdoGetAllDocumentDetailsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve details of a document.

 * @summary Get document details
 */
export const smbdoGetDocumentDetail = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<DocumentResponse>(
    { url: `/documents/${id}`, method: 'GET', signal },
    options
  );
};

export const getSmbdoGetDocumentDetailQueryKey = (id: string) => {
  return [`/documents/${id}`] as const;
};

export const getSmbdoGetDocumentDetailQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoGetDocumentDetailQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoGetDocumentDetail>>
  > = ({ signal }) => smbdoGetDocumentDetail(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoGetDocumentDetailQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoGetDocumentDetail>>
>;
export type SmbdoGetDocumentDetailQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useSmbdoGetDocumentDetail<
  TData = Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetDocumentDetail<
  TData = Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoGetDocumentDetail<
  TData = Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get document details
 */

export function useSmbdoGetDocumentDetail<
  TData = Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoGetDocumentDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSmbdoGetDocumentDetailQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Download a document using its unique identifier.
 * @summary Download a document
 */
export const smbdoDownloadDocument = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<string | SmbdoDownloadDocument200Six>(
    { url: `/documents/${id}/file`, method: 'GET', signal },
    options
  );
};

export const getSmbdoDownloadDocumentQueryKey = (id: string) => {
  return [`/documents/${id}/file`] as const;
};

export const getSmbdoDownloadDocumentQueryOptions = <
  TData = Awaited<ReturnType<typeof smbdoDownloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoDownloadDocument>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSmbdoDownloadDocumentQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof smbdoDownloadDocument>>
  > = ({ signal }) => smbdoDownloadDocument(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof smbdoDownloadDocument>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SmbdoDownloadDocumentQueryResult = NonNullable<
  Awaited<ReturnType<typeof smbdoDownloadDocument>>
>;
export type SmbdoDownloadDocumentQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useSmbdoDownloadDocument<
  TData = Awaited<ReturnType<typeof smbdoDownloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoDownloadDocument>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoDownloadDocument>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoDownloadDocument<
  TData = Awaited<ReturnType<typeof smbdoDownloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoDownloadDocument>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof smbdoDownloadDocument>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSmbdoDownloadDocument<
  TData = Awaited<ReturnType<typeof smbdoDownloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoDownloadDocument>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Download a document
 */

export function useSmbdoDownloadDocument<
  TData = Awaited<ReturnType<typeof smbdoDownloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof smbdoDownloadDocument>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSmbdoDownloadDocumentQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a list of parties.
 * @summary List parties
 */
export const getAllParties = (
  params?: GetAllPartiesParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListPartyResponse>(
    { url: `/parties`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllPartiesQueryKey = (params?: GetAllPartiesParams) => {
  return [`/parties`, ...(params ? [params] : [])] as const;
};

export const getGetAllPartiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllParties>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllPartiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllParties>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllPartiesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllParties>>> = ({
    signal,
  }) => getAllParties(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllParties>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllPartiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllParties>>
>;
export type GetAllPartiesQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAllParties<
  TData = Awaited<ReturnType<typeof getAllParties>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | GetAllPartiesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllParties>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllParties>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllParties<
  TData = Awaited<ReturnType<typeof getAllParties>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllPartiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllParties>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllParties>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllParties<
  TData = Awaited<ReturnType<typeof getAllParties>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllPartiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllParties>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List parties
 */

export function useGetAllParties<
  TData = Awaited<ReturnType<typeof getAllParties>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllPartiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllParties>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllPartiesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new party.
 * @summary Create party
 */
export const postParty = (
  createPartyRequest: BodyType<CreatePartyRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<PartyResponse>(
    {
      url: `/parties`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createPartyRequest,
    },
    options
  );
};

export const getPostPartyMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postParty>>,
    TError,
    { data: BodyType<CreatePartyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postParty>>,
  TError,
  { data: BodyType<CreatePartyRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postParty>>,
    { data: BodyType<CreatePartyRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postParty(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPartyMutationResult = NonNullable<
  Awaited<ReturnType<typeof postParty>>
>;
export type PostPartyMutationBody = BodyType<CreatePartyRequest>;
export type PostPartyMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create party
 */
export const usePostParty = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postParty>>,
    TError,
    { data: BodyType<CreatePartyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postParty>>,
  TError,
  { data: BodyType<CreatePartyRequest> },
  TContext
> => {
  const mutationOptions = getPostPartyMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Details a party by its unique identifier.
 * @summary Get party
 */
export const getParty = (
  partyId: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<PartyResponse>(
    { url: `/parties/${partyId}`, method: 'GET', signal },
    options
  );
};

export const getGetPartyQueryKey = (partyId: string) => {
  return [`/parties/${partyId}`] as const;
};

export const getGetPartyQueryOptions = <
  TData = Awaited<ReturnType<typeof getParty>>,
  TError = ErrorType<unknown>,
>(
  partyId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getParty>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPartyQueryKey(partyId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getParty>>> = ({
    signal,
  }) => getParty(partyId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!partyId,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getParty>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetPartyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getParty>>
>;
export type GetPartyQueryError = ErrorType<unknown>;

export function useGetParty<
  TData = Awaited<ReturnType<typeof getParty>>,
  TError = ErrorType<unknown>,
>(
  partyId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getParty>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParty>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetParty<
  TData = Awaited<ReturnType<typeof getParty>>,
  TError = ErrorType<unknown>,
>(
  partyId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getParty>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getParty>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetParty<
  TData = Awaited<ReturnType<typeof getParty>>,
  TError = ErrorType<unknown>,
>(
  partyId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getParty>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get party
 */

export function useGetParty<
  TData = Awaited<ReturnType<typeof getParty>>,
  TError = ErrorType<unknown>,
>(
  partyId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getParty>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPartyQueryOptions(partyId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates a party.
 * @summary Update party
 */
export const updateParty = (
  partyId: string,
  updatePartyRequest: BodyType<UpdatePartyRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<PartyResponse>(
    {
      url: `/parties/${partyId}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updatePartyRequest,
    },
    options
  );
};

export const getUpdatePartyMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateParty>>,
    TError,
    { partyId: string; data: BodyType<UpdatePartyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateParty>>,
  TError,
  { partyId: string; data: BodyType<UpdatePartyRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateParty>>,
    { partyId: string; data: BodyType<UpdatePartyRequest> }
  > = (props) => {
    const { partyId, data } = props ?? {};

    return updateParty(partyId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePartyMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateParty>>
>;
export type UpdatePartyMutationBody = BodyType<UpdatePartyRequest>;
export type UpdatePartyMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update party
 */
export const useUpdateParty = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateParty>>,
    TError,
    { partyId: string; data: BodyType<UpdatePartyRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateParty>>,
  TError,
  { partyId: string; data: BodyType<UpdatePartyRequest> },
  TContext
> => {
  const mutationOptions = getUpdatePartyMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Start validation for a Party.
 * @summary Start party validation
 */
export const postPartyValidations = (
  partyId: string,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<N202Response>(
    { url: `/parties/${partyId}/validations`, method: 'POST' },
    options
  );
};

export const getPostPartyValidationsMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N422Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPartyValidations>>,
    TError,
    { partyId: string },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPartyValidations>>,
  TError,
  { partyId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPartyValidations>>,
    { partyId: string }
  > = (props) => {
    const { partyId } = props ?? {};

    return postPartyValidations(partyId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPartyValidationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPartyValidations>>
>;

export type PostPartyValidationsMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N422Response
  | N500Response
  | N503Response
>;

/**
 * @summary Start party validation
 */
export const usePostPartyValidations = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N422Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPartyValidations>>,
    TError,
    { partyId: string },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPartyValidations>>,
  TError,
  { partyId: string },
  TContext
> => {
  const mutationOptions = getPostPartyValidationsMutationOptions(options);

  return useMutation(mutationOptions);
};
